# SYNOPSIS

    use Validation::Class::Simple::Streamer;

    my $params = Validation::Class::Simple::Streamer->new($parameters);

    # the point here is expressiveness

    unless ($params->check('user_cc')->creditcard(['visa', 'mastercard'])) {
        # credit card is valid
    }

    unless ($params->check('email_address')->min_length(3)->email) {
        # email address is valid
    }

    # prepare password for validation
    $params->check('password');

    die "Password is not valid"
        unless $params->min_symbols(1) && $params->matches('password2');

    # are you of legal age?
    if ($params->check('user_age')->between('18-75')) {
        # access to explicit content approved
    }

    # print any errors
    print "$params\n";

    # validate like a boss
    # THE END

# DESCRIPTION

Validation::Class::Simple::Streamer is a simple streaming validation module
that makes data validation fun. It is built around the powerful
[Validation::Class](http://search.cpan.org/perldoc?Validation::Class) data validation framework via [Validation::Class::Simple](http://search.cpan.org/perldoc?Validation::Class::Simple).

This module is/was inspired by the simplicity and expressiveness of the Node.js
validator library, [https://github.com/chriso/node-validator](https://github.com/chriso/node-validator), but built on top
of the ever-awesome Validation::Class framework, which is designed to be modular
and extensible, i.e. whatever custom directives you create and install will
become methods on this class which you can then use to enforce policies.

The check method specifies the parameter to be used in the following series of
commands.

    $self = $self->check('email_address');

The clear method resets the validation queue and declared fields but leaves the
declared parameters in-tact, almost like the object state post-instantiation.

    $self->clear;

The messages method returns any registered errors as a concatenated string using
the ["errors\_to\_string" in Validation::Class::Prototype](http://search.cpan.org/perldoc?Validation::Class::Prototype#errors\_to\_string) method and accepts the same
parameters.

    print $self->messages("\n");

The params method gives you access to the validator's params list which is a
[Validation::Class::Mapping](http://search.cpan.org/perldoc?Validation::Class::Mapping) object.

    $params = $self->params($parameters);

The validate method uses the validator to perform data validation based on
the series and sequence of commands issued previously. This method is called
implicitly whenever the object is used in boolean context, e.g. in a conditional.

    $true = $self->validate;

The validator method gives you access to the object's validation class which is
a [Validation::Class::Simple](http://search.cpan.org/perldoc?Validation::Class::Simple) object.

    $validator = $self->validator;
